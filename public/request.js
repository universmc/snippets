require('dotenv').config();
const express = require('express');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');
const path = require('path');
const Groq = require('groq-sdk');
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });

const app = express();
const port = 5007;

app.use(express.static('public/'));

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/image', async (req, res) => {
    const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

    const prompt = `
    **√âl√©ments Cl√©s Identifi√©s :**

    * **Promotion / √âv√©nement IA :** Le th√®me central est l'Intelligence Artificielle et un √©v√©nement ou une promotion y √©tant li√©.
    * **Couleurs de l'IA :** Une demande d'imaginer des couleurs associ√©es √† l'IA.
    * **Futur (Avenir) :** L'image doit √©voquer une vision du futur.
    * **Caen, Normandie :** Le lieu de cet √©v√©nement ou la ville o√π l'on imagine le futur de l'IA.
    * **cityLogo IA :** Sugg√®re la cr√©ation d'un logo IA pour la ville de Caen (ou pour l'√©v√©nement).

    **Interpr√©tation et Conception de l'Image :**

    Je vais cr√©er une image qui combine ces √©l√©ments en visualisant un √©v√©nement futuriste li√© √† l'IA se d√©roulant √† Caen. L'image int√©grera un logo IA stylis√© pour Caen et utilisera des couleurs souvent associ√©es √† la technologie et √† l'innovation.

    **L'image repr√©sentera :**

    * **Un arri√®re-plan urbain moderne de Caen** (inspir√© de l'architecture locale, peut-√™tre avec une touche futuriste).
    * **Des √©l√©ments graphiques √©voquant l'IA :** r√©seaux neuronaux abstraits, flux de donn√©es lumineux, formes g√©om√©triques complexes.
    * **Le "cityLogo IA" de Caen :** Un logo stylis√© int√©grant les initiales "C" et "N" (pour Caen et Normandie) ou un symbole reconnaissable de Caen (comme le ch√¢teau) fusionn√© avec des motifs futuristes ou des ic√¥nes li√©es √† l'IA (circuits, points de connexion).
    * **Une palette de couleurs associ√©e √† l'IA :** Des tons de bleu √©lectrique, de vert n√©on, de violet profond, contrast√©s avec des touches de blanc ou de gris m√©tallis√© pour un aspect technologique et futuriste.
    * **Une ambiance g√©n√©rale de dynamisme et d'innovation**, sugg√©rant un √©v√©nement ou une promotion.
    `;

    const contents = `
    Image d'un √©v√©nement futuriste li√© √† l'IA √† Caen, Normandie.
    Arri√®re-plan : Un paysage urbain moderne de Caen avec des b√¢timents historiques fusionn√©s avec des √©l√©ments architecturaux futuristes, des √©crans holographiques projetant des informations sur l'IA, une atmosph√®re nocturne avec des lumi√®res vives et des reflets m√©talliques.
    √âl√©ments IA : Des r√©seaux neuronaux abstraits avec des lignes lumineuses pulsantes de couleur bleu √©lectrique et violet profond, des formes g√©om√©triques complexes en 3D avec des effets holographiques, des flux de donn√©es lumineux qui s'entrelacent et convergent vers le logo IA.
    Logo IA de Caen : Un logo stylis√© int√©grant les initiales "C" et "N" avec des motifs de circuits imprim√©s et des ic√¥nes de connexion, des effets de lumi√®re n√©on et des reflets m√©talliques, plac√© au centre de l'image.
    Couleurs : Palette de couleurs domin√©e par le bleu √©lectrique, le vert n√©on et le violet profond, avec des touches de blanc m√©tallique et de gris anthracite pour un aspect technologique et futuriste.
    Ambiance : Dynamique, innovante et futuriste, sugg√©rant un √©v√©nement ou une promotion de l'IA, avec une sensation d'√©nergie et de progr√®s.
    `;

    const model = genAI.getGenerativeModel({
        model: 'gemini-2.0-flash-exp-image-generation',
        generationConfig: {
            responseModalities: ['Text', 'Image'],
        },
    });

    try {
        const response = await model.generateContent(contents);
        for (const part of response.response.candidates[0].content.parts) {
            if (part.inlineData) {
                const imageData = part.inlineData.data;
                res.json({ image: imageData });
                return;
            }
        }
        res.status(500).send('Image non trouv√©e');
    } catch (error) {
        console.error('Erreur :', error);
        res.status(500).send('Erreur lors de la g√©n√©ration de l\'image');
    }
});

app.get('/server', async (req, res) => {
    try {
        const chatCompletion = await groq.chat.completions.create({
            messages: [
                { role: 'assistant', content: `** **<br/> | in box |.`, },
                {
                    role: 'user',
                    content: `** G√©n√©rez plus de 15 \n\
                    #hashtag ‚òÅÔ∏è Id√©e g√©niale** : Trouver des id√©es originales et innovantes pour le d√©veloppement de prompt --engine ( Gestion des ressources et recylage en <meta/> donn√©e et de la capacit√© de l √©quipe ), Ta r√©ponse de t'√™tre r√©dig√© au format liste en HTML, respectant les normes du Web s√©mantique W3C int√©grant des emoji int√©lligent associer.`,
                },
            ],
            model: 'gemma2-9b-it',
        });

        res.status(200).send(chatCompletion.choices[0].message.content);
    } catch (error) {
        res.status(500).send('Une erreur est survenue');
    }
});
app.get('/hashtag', async (req, res) => {
  try {
      const chatCompletion = await groq.chat.completions.create({
          messages: [
              { role: 'assistant', content: `** **<br/> | in box |.`, },
              {
                  role: 'user',
                  content: `** G√©n√©rez plus de 15 \n\
                  #hashtag ‚òÅÔ∏è Id√©e g√©niale** : Trouver des id√©es originales et innovantes pour le d√©veloppement de prompt --engine ( Gestion des ressources et recylage en <meta/> donn√©e et de la capacit√© de l √©quipe )</br>.`,
              },
          ],
          model: 'gemma2-9b-it',
      });

      res.status(200).send(chatCompletion.choices[0].message.content);
  } catch (error) {
      res.status(500).send('Une erreur est survenue');
  }
});
app.get('/evenements', async (req, res) => {
  try {
      const chatCompletion = await groq.chat.completions.create({
          messages: [
              { role: 'assistant', content: `** **<br/> | in box |.`, },
              {
                  role: 'user',
                  content: `** G√©n√©rez 5 id√©es d'√©v√©nements innovants pour promouvoir l'IA √† Caen. Incluez des titres, des descriptions et des formats. Ta r√©ponse doit √™tre r√©dig√© au format liste en HTML, respectant les normes du Web s√©mantique W3C int√©grant des emoji int√©lligent associer.`,
              },
          ],
          model: 'gemma2-9b-it',
      });

      res.status(200).send(chatCompletion.choices[0].message.content);
  } catch (error) {
      res.status(500).send('Une erreur est survenue');
  }
});

app.get('/promotion', async (req, res) => {
  try {
      const chatCompletion = await groq.chat.completions.create({
          messages: [
              { role: 'assistant', content: `** **<br/> | in box |.`, },
              {
                  role: 'user',
                  content: `** G√©n√©rez 5 id√©es de strat√©gies de promotion pour l'IA √† Caen. Incluez des canaux, des messages cl√©s et des publics cibles. Ta r√©ponse de t'√™tre r√©dig√© au format liste en HTML, respectant les normes du Web s√©mantique W3C int√©grant des emoji int√©lligent associer.`,
              },
          ],
          model: 'gemma2-9b-it',
      });

      res.status(200).send(chatCompletion.choices[0].message.content);
  } catch (error) {
      res.status(500).send('Une erreur est survenue');
  }
});
app.get('/hackathon', async (req, res) => {
    try {
        const chatCompletion = await groq.chat.completions.create({
            messages: [
                { role: 'assistant', content: `** **<br/> | in box |.`, },
                {
                    role: 'user',
                    content: `** G√©n√©rez 5 id√©es de projets innovants pour un hackathon sur l'IA √† Caen. Incluez des descriptions, des objectifs et des technologies potentielles. Ta r√©ponse doit √™tre r√©dig√© au format liste en HTML, respectant les normes du Web s√©mantique W3C int√©grant des emoji int√©lligent associer.`,
                },
            ],
            model: 'gemma2-9b-it',
        });

        res.status(200).send(chatCompletion.choices[0].message.content);
    } catch (error) {
        res.status(500).send('Une erreur est survenue');
    }
});
app.get('/datathon', async (req, res) => {
    try {
        const chatCompletion = await groq.chat.completions.create({
            messages: [
                { role: 'assistant', content: `** **<br/> | in box |.`, },
                {
                    role: 'user',
                    content: `** D√©crivez en d√©tail les soir√©e de type "Datathon IA pour Caen". Incluez le format, les objectifs, les participants, et les b√©n√©fices attendus.conception : üèÜ, comp√©tition d'id√©es, sessions de financement et de demonstration.Ta r√©ponse doit √™tre r√©dig√© au format liste en HTML, respectant les normes du Web s√©mantique W3C int√©grant des emoji int√©lligent associer.`,
                },
            ],
            model: 'gemma2-9b-it',
        });

        res.status(200).send(chatCompletion.choices[0].message.content);
    } catch (error) {
        console.error('Erreur :', error);
        res.status(500).send('Erreur lors de la g√©n√©ration des d√©tails du datathon.');
    }
});
app.get('/projets', async (req, res) => {
    try {
        const chatCompletion = await groq.chat.completions.create({
            messages: [
                { role: 'assistant', content: `** **<br/> | in box |.`, },
                {
                    role: 'user',
                    content: `** G√©n√©rez 5 id√©es de projets cr√©atifs pour une startup, ax√© sur l'art, les crypto game, les jeux et les performances interactives. Incluez des titres, des descriptions et des technologies IA potentielles.Ta r√©ponse doit √™tre r√©dig√© au format liste en HTML, respectant les normes du Web s√©mantique W3C int√©grant des emoji int√©lligent associer.`,
                },
            ],
            model: 'gemma2-9b-it',
        });

        res.status(200).send(chatCompletion.choices[0].message.content);
    } catch (error) {
        res.status(500).send('Une erreur est survenue');
    }
});

app.get('/recyclage', async (req, res) => {
    try {
        const chatCompletion = await groq.chat.completions.create({
            messages: [
                { role: 'assistant', content: `** **<br/> | in box |.`, },
                {
                    role: 'user',
                    content: `** D√©cris comment un syst√®me d'IA pourrait analyser des images de d√©chets pour aider au tri √† Caen, et propose quelques fonctionnalit√©s pour une application mobile. Ta r√©ponse doit √™tre r√©dig√© au format liste en HTML, respectant les normes du Web s√©mantique W3C int√©grant des emoji int√©lligent associer.`,
                },
            ],
            model: 'gemma2-9b-it',
        });

        res.status(200).send(chatCompletion.choices[0].message.content);
    } catch (error) {
        res.status(500).send('Erreur lors de l\'analyse des d√©chets');
    }
});
app.get('/bootcamp', async (req, res) => {
    try {
        const chatCompletion = await groq.chat.completions.create({
            messages: [
                { role: 'assistant', content: `** **<br/> | in box |.`, },
                {
                    role: 'user',
                    content: `** D√©taille le contenu d'un Bootcamp Model la vision apprentissage superviser de l'IA √† Caen. Inclut les modules previsionnel et sp√©cifique, les intervenants, les dates et les lieux.Vous pouvez enrichir ce programme en ajoutant des informations sur les projets concrets, les outils et les technologies utilis√©s, les pr√©requis, ainsi que les modalit√©s d'inscription. Ta r√©ponse doit √™tre r√©dig√© au format liste en HTML, respectant les normes du Web s√©mantique W3C int√©grant des emoji int√©lligent associer`,
                },
            ],
            model: 'gemma2-9b-it',
        });

        res.status(200).send(chatCompletion.choices[0].message.content);
    } catch (error) {
        res.status(500).send('Une erreur est survenue');
    }
});
app.listen(port, () => console.log(`Server running on port http://localhost:${port}`));